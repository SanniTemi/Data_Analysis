/*-- SANNI TEMILOLA 
		SQL PROJECT*/

USE SAKILA;


-- QUESTION 1
SELECT * FROM FILM
WHERE RATING = 'PG' AND LENGTH > 50;

-- QUESTION 2
SELECT SUM(AMOUNT) AS TOTAL_PAYMENT
FROM PAYMENT
WHERE PAYMENT_DATE >= 2006-01-01;

-- QUESTION 3
SELECT LAST_NAME , FIRST_NAME 
FROM ACTOR
WHERE LAST_NAME = 'HOPKINS';

-- QUESTION 4
SELECT DISTINCT LAST_NAME
FROM ACTOR;

-- QUESTION 5
SELECT COUNT(DISTINCT LAST_NAME) AS UNIQUE_COUNT
FROM ACTOR;

-- QUESTION 6
SELECT ACTOR_ID , COUNT(FILM_ID) AS FILM_COUNT 
FROM FILM_ACTOR
GROUP BY ACTOR_ID
ORDER BY FILM_COUNT DESC
LIMIT 1; 


-- QUESTION 7
SELECT RETURN_DATE
FROM RENTAL
JOIN INVENTORY ON RENTAL.INVENTORY_ID = INVENTORY.INVENTORY_ID
JOIN FILM ON INVENTORY.FILM_ID = FILM.FILM_ID 
WHERE FILM.TITLE = 'ACADEMY DINOSAUR'
limit 1;

-- QUESTION 8 
SELECT AVG(LENGTH) AS AVERAGE_RUNNING_TIME
FROM FILM;

-- QUESTION 9
SELECT * from employees;

-- QUESTION 10
SELECT * from film natural join inventory;

-- QUESTION 11
SELECT SUM(AMOUNT)
FROM PAYMENT;


-- QUESTION 12
SELECT CONCAT(customer.first_name, ' ', customer.last_name) AS full_name
FROM customer
JOIN rental ON customer.customer_id = rental.customer_id
JOIN inventory ON rental.inventory_id = inventory.inventory_id
JOIN film ON inventory.film_id = film.film_id
JOIN film_category ON film.film_id = film_category.film_id
JOIN category ON film_category.category_id = category.category_id
WHERE category.name = 'Sci-Fi'
GROUP BY full_name
HAVING COUNT(*) > 2
ORDER BY FULL_NAME;

-- QUESTION 13
SELECT CITY.CITY,
SUM(PAYMENT.AMOUNT) AS
TOTAL_REVENUE
FROM PAYMENT
JOIN CUSTOMER ON
PAYMENT.CUSTOMER_ID =
CUSTOMER.CUSTOMER_ID
JOIN ADDRESS ON CUSTOMER.ADDRESS_ID = ADDRESS.ADDRESS_ID
JOIN CITY ON ADDRESS.CITY_ID = CITY.CITY_ID
GROUP BY CITY.CITY
ORDER BY TOTAL_REVENUE DESC
LIMIT 1;

-- QUESTION 14
SELECT FIRST_NAME, LAST_NAME
FROM ( 
SELECT FIRST_NAME, LAST_NAME
FROM ACTOR
WHERE ACTOR_ID != 8
AND FIRST_NAME = (SELECT FIRST_NAME
FROM ACTOR WHERE ACTOR_ID = 8)
 UNION
 
 SELECT FIRST_NAME, LAST_NAME
 FROM CUSTOMER 
WHERE FIRST_NAME = (SELECT FIRST_NAME
FROM ACTOR WHERE ACTOR_ID = 8)
) AS ac;

--- QUESTION 15
SELECT COUNT(*) AS CATEGORY_COUNT
FROM (
SELECT FC.CATEGORY_ID,
AVG(F.REPLACEMENT_COST - F.RENTAL_RATE) AS
AVG_COST_DIFFERENCE
FROM FILM F
INNER JOIN FILM_CATEGORY FC ON F.FILM_ID
= FC.FILM_ID
GROUP BY FC.CATEGORY_ID
HAVING AVG_COST_DIFFERENCE > 17
) AS SUBQUERY;





